{"ast":null,"code":"import config from \"../config\";\nimport axios from \"axios\";\nexport async function login(email, password) {\n  const body = {\n    email,\n    password\n  };\n  const response = await axios.post(`${config.url}/user/login`, body);\n  return response.data;\n}\nexport async function register(fullName, email, password, phoneNO) {\n  const body = {\n    fullName,\n    email,\n    password,\n    phoneNO\n  };\n  const response = await axios.post(`${config.url}/user/register`, body);\n  return response.data; // Assuming your backend sends back a JSON response with a \"status\" field\n}\napp.post('/verify-email', async (req, res) => {\n  const {\n    email,\n    verificationCode\n  } = req.body;\n  try {\n    // Retrieve user from the database by email\n    const user = await User.findOne({\n      email\n    });\n\n    // Check if user exists and if the verification code matches\n    if (!user || user.verificationCode !== verificationCode) {\n      return res.status(400).json({\n        message: 'Invalid verification code'\n      });\n    }\n\n    // Mark the email as verified in the database\n    user.verified = true;\n    await user.save();\n    res.status(200).json({\n      message: 'Email verified successfully'\n    });\n  } catch (error) {\n    console.error('Error verifying email:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Route to handle password retrieval\napp.post('/get-password', async (req, res) => {\n  const {\n    email,\n    verificationCode\n  } = req.body;\n  try {\n    // Retrieve user from the database by email\n    const user = await User.findOne({\n      email\n    });\n\n    // Check if user exists and if the verification code matches\n    if (!user || user.verificationCode !== verificationCode) {\n      return res.status(400).json({\n        message: 'Invalid verification code'\n      });\n    }\n\n    // Generate a temporary password (you can use a library like crypto to generate a secure random password)\n    const temporaryPassword = generateTemporaryPassword();\n\n    // Send the temporary password to the user's email\n    await sendTemporaryPasswordEmail(email, temporaryPassword);\n\n    // Update the user's password in the database (optional)\n    user.password = hashPassword(temporaryPassword);\n    await user.save();\n    res.status(200).json({\n      message: 'Temporary password sent to your email'\n    });\n  } catch (error) {\n    console.error('Error retrieving password:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});","map":{"version":3,"names":["config","axios","login","email","password","body","response","post","url","data","register","fullName","phoneNO","app","req","res","verificationCode","user","User","findOne","status","json","message","verified","save","error","console","temporaryPassword","generateTemporaryPassword","sendTemporaryPasswordEmail","hashPassword"],"sources":["D:/Innobyte/Client/src/Services/user.js"],"sourcesContent":["import config from \"../config\";\nimport axios  from \"axios\";\n\nexport async function login(email, password) {\n  const body = { email, password };\n  const response = await axios.post(`${config.url}/user/login`, body);\n  return response.data;\n}\n\nexport async function register(fullName, email, password, phoneNO) {\n  const body = { fullName, email, password, phoneNO};\n  const response = await axios.post(`${config.url}/user/register`, body);\n  return response.data; // Assuming your backend sends back a JSON response with a \"status\" field\n}\napp.post('/verify-email', async (req, res) => {\n  const { email, verificationCode } = req.body;\n\n  try {\n    // Retrieve user from the database by email\n    const user = await User.findOne({ email });\n\n    // Check if user exists and if the verification code matches\n    if (!user || user.verificationCode !== verificationCode) {\n      return res.status(400).json({ message: 'Invalid verification code' });\n    }\n\n    // Mark the email as verified in the database\n    user.verified = true;\n    await user.save();\n\n    res.status(200).json({ message: 'Email verified successfully' });\n  } catch (error) {\n    console.error('Error verifying email:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// Route to handle password retrieval\napp.post('/get-password', async (req, res) => {\n  const { email, verificationCode } = req.body;\n\n  try {\n    // Retrieve user from the database by email\n    const user = await User.findOne({ email });\n\n    // Check if user exists and if the verification code matches\n    if (!user || user.verificationCode !== verificationCode) {\n      return res.status(400).json({ message: 'Invalid verification code' });\n    }\n\n    // Generate a temporary password (you can use a library like crypto to generate a secure random password)\n    const temporaryPassword = generateTemporaryPassword();\n\n    // Send the temporary password to the user's email\n    await sendTemporaryPasswordEmail(email, temporaryPassword);\n\n    // Update the user's password in the database (optional)\n    user.password = hashPassword(temporaryPassword);\n    await user.save();\n\n    res.status(200).json({ message: 'Temporary password sent to your email' });\n  } catch (error) {\n    console.error('Error retrieving password:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}